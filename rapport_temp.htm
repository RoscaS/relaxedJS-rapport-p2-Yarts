<html><head>
        <meta charset="UTF-8">
        
      </head>
      <body> <div class="report-sidebar"><p>Yet Another Real Time Strategy ( game )</p></div><div style="page-break-before:always"></div><h2>Introduction</h2>
<p>Dans le cadre du Projet 2.2 de la formation DLM de l'He-Arc de Neuchâtel il est demandé de réaliser une application graphique avec le langage Java par groupe de trois personnes. Le projet choisit est un jeu de stratégie en temps réel sobrement nommé Yet Another Real Time Strategy (game) ou YARTS.</p>
<p>Ce document tente de relater l'histoire de YARTS. Comment ce qui aurait pu n'être qu'une formalité en périférie d'un semestre déjà bien chargé est devenu l'objet d'une passion ainsi qu'un excellent professeur pour une gamme très large de points clé de la formation d'un ingénieur en développement logiciel.</p>
<div style="page-break-before:always"></div><h2>Contextualisation</h2>
<p>Ce chapitre est un complément à l'introduction. Il vise à poser les fondations contextuelles du projet ainsi que de définir une base de communication pour que le lecteur puisse se faire une idée de comment les rédacteurs concoivent certains éléments clé du contexte dans le quel le projet s'inscrit.</p>
<h3>Jeu de stratégie en temps réel</h3>
<p>Traditionnellement les jeux de stratégie se jouent au tour par tour. Aussi bien sur plateau qu'avec des cartes. Les jeux de stratégie sont légion, le plus célèbres d'entre eux étant probablement les échecs. Tous ces jeux ont en commun la nécessité pour atteindre la victoire de réfléchir à une stratégie et de l'adapter au fur et à mesure que le ou les autres joueurs tentent eux aussi de développer leur propre stratégie. En général dans ce genre de jeux, le temps n'est pas un facteur limitant. Par exemple, aux échecs, un joueur aura beau être capable de déplacer très rapidement son fou, ça n'aura aucun impacte sur l'issue de la partie.</p>
<p>L'avénement de l'informatique et la puissance de calcul des ordinateurs a permis de faire évoluer la diversité dans les jeux de stratégie en y ajoutant la notion de temps réel. Dans ce genre de jeu, les joueurs ne jouent plus chacun à leur tour mais jouent maintenant de façon concurente. Jouer vite est une qualité qui peut se mesurer en nombre d'actions par seconde et même si ce n'est pas forcément le joueur le plus rapide qui gagne automatiquement la partie, la capacité d'exécuter rapidement un grand nombre d'actions peut donner des avantages décisifs et en fonction de la situation, cela devient un critère tout aussi important que la capacité d'élaborer une stratégie solide ou celle de s'adapter rapidement.</p>
<p>Pour illustrer ça, immaginons que les échecs se jouent en temps réel, les joueurs ne doivent plus attendre leur tour et peuvent jouer autant qu'ils le veulent. Les rêgles sont toujours les mêmes, et les pièces bougent de la même façon mais maintenant, un joueur doit non seulement réfléchir plus rapidement à comment adapter sa stratégie mais il doit également faire preuve de dextérité pour bouger rapidement ses pièces. En effet dans cette variante on peut imaginer un joueur rapide qui dans l'absolu est capable de déplacer trois pièces en une seconde et un autre moins rapide qui n'est capable d'en bouger que deux dans le même interval de temps. En conclusion, un bon joueur de cette variante imaginaire des échecs ne sera pas forcément le plus fin stratège mais celui qui combine le mieux stratégie, capacité d'adaptation, vitesse d'exécution et dextérité.</p>
<p>Ce genre de jeux de stratégie sont ce qu'on appelle communément des jeux de stratégie en temps réel (STR en français et RTS pour Real Time Strategy Game en anglais).</p>
<p>Le terme "jeu de stratégie en temps réel" est utilisé pour la première fois en 1992 pour désigner le genre du jeu <em>Dune II</em> basé sur le roman éponyme de Frank Herbert. Depuis, le genre à beaucoup évolué mais principalement graphiquement. En effet, bien que la définition précise fasse l'objet de débats, les jeux de stratégie en temps réel sont traditionnellement définis par les termes "<strong>récolter</strong>", "<strong>construire</strong>" et "<strong>détruire</strong>" en plus d'être des jeux où l'action se déroule en temps réel entre les différents participants.</p>
<p>En partant des trois termes "récolter", "construire" et "détruire", on peut déduire que les intentions des joueurs sont axés autour du fait de "gérer des ressources", "développer une base" et "créer des unités" pour combattre l'adversaire.
L'action se déroulant en temps réel, le joueur ne dispose que d’un temps limité pour gérer ses ressources et ses bases et contrôler ses unités, ce qui introduit les notions de rapidité en plus de la dimension stratégique comme expliqué précédement et explique que le contrôle à la souris et au clavier soit généralement privilégié.</p>
<h3>Java</h3>
<p>Java est un langage haut niveau, orienté objet, avec un typage statique fort dont la syntaxe est proche du C++. Il est multi-plateformes et guidé par le principe du WORA (Write once, Run Anywhere).</p>
<h3>LibGDX</h3>
<p>LibGDX est un framework Java de développement de jeux vidéos. Portable et peu opinionné, il laisse une très grande libérté aux développeurs sur les outils à utiliser.</p>
<h3>Expérience des développeurs</h3>
<p>Ce point ainsi que le suivant, se veulent moins objectifs pour permettre au lecteur de se faire une idée de l'état d'esprit ainsi que du ressenti des membres du groupe vis à vis de leur façon d'aborder le projet. C'est un écart dans les rêgles de la rédaction technique que le rédacteur assume et fait en pleine conscience. Je parle donc maintenant en mon nom (Sol), et donne mon avis et mon ressenti.</p>
<blockquote>
<p>Au départ du projet, les trois membres du groupe avait une expérience limitiée dans le langage imposé, une connaissance presque nulle des design patterns et virtuellement aucune expérience dans la création de jeux vidéo. À ce stade, le choix du projet était purement émotionnel et aucunement basé sur des critères objectifs de faisabilité. À ce sujet, je pensent qu'il serait peut être intéressant de modifier  les premières échéances pour permettre aux élèves d'avoir le temps de faire un état de l'art avant de proposer un choix de projet.</p>
<p>Sans être conscient des implications, le choix du projet s'est fixé sur un jeu de stratégie en temps réel, le langage étant imposé aucune discussion ou débat n'a eu lieu de ce coté là mais un second choix naif a compliqué un peu plus les débuts du projet, l'utilisation de la bibliothèque LibGDX.</p>
<h3>Première approche</h3>
<p>Comme expliqué dans le point qui concerne LibGdx, le framework est peu opinionné et offre une grande liberté dans le pannel d'outils à utiliser. Tellement de liberté que ça en fait à mon avis un framework qui n'est pas forcément idéal pour des développeurs sans expérience dans le domaine.</p>
<p>Dés les premières minutes dans la documentation (qui au passage est très bonne) on se retrouve noyé dans un jargon qui nous fait nous sentir comme l'englishman de Sting qui se baladant dans les rues de New york. Ça parle de cameras, de cameras orthographiques, de viewports, mais attends, il y pas déjà un viewport dans la camera ? Il me semble y avoir vu une methode getViewport. Des pixmap, des sprites, des textures, des texturesRegion, des batch des animations, des actors, des entity, des stages, des body, des world, des fixtures, des fixturesJoint, des bodyDefinition, des fixtureDefinition, des frameBuffer des methodes act et de methodes render... Certainnes classes fonctionnent en unités SI d'autres en pixel avec l'origine en bas à gauche et encore d'autres avec l'origine en haut à gauche.</p>
<p>Quel est l'atlernative à LibGDX ? Les autres frameworks de jeu semblent moins apprécié par la communauté sur les forums et il est hors de question d'utiliser Swing et réinventer la roue ça c'était le job du P2.1. Donc va pour LibGDX. Comment poser une structure pour le projet alors qu'on a aucune idée du fonctionnement de ce monstre? Il est demandé dans les étapes préliminaires de faire un cahier des charges et rapidement après d'en extraire des spécifications. Ok, on peut faire ça mais ces spécifications seront incomplètes et déconnectées de la réalité.</p>
<p>De nombreux livres ont été écrits sur les jeux de stratégie et les débats haut niveau (dans le sens une "abstraction importante des détails d'implémentation") sur la meilleur façon de l'implémenter font toujours rage sur les forums spécialisés. Nous on a 3 semaines pour avoir un cahier des charges, des spécifications et un premier jet de structure. "Vous pensez que c'est toujours une bonne idée de faire un jeu de stratégie?" "mais on a déja remis le sujet la semaine passée et certains autres groupes ont déjà commencé à prototyper". Ok, alors, continuons à nous éduquer.</p>
<p>Comme prévu, un cahier des charges ainsi qu'une série de spécifications naives (qui nous semblaient très pertinentes à l'époque de leur rédaction) ont été posées et jusque là ça ne se passait pas trop mal. Il était donc temps d'attaquer une première tentative de structure en se fixant pour objectif de faire un premier jet en ne prenant pas en compte LibGDX. Le résultat, très justement qualifié de "plat de spaghetti par madame Rizotti" était literalement le plat de spaghetti le plus caractéristique du genre. 3 étudiants qui ont eu leur premier cours de design pattern deux semaines avant tentent de réfléchir aux implications d'un clique sur une entité le tout en terme de relation entre les classes. Le pire dans tout ça, c'est que l'exercice était interessant et que nous avons passé pas mal de temps dessus avant de réaliser que c'était de la foutaise et qu'on irait nul part avant de comprendre l'interaction qu'il existe entre LibGDX et nos classes.</p>
<p>Il existe peu de tutoriels récents de qualité sur l'utilisation du framework dans sa globalité. De nombreuses informations sont trouvable mais assument une certaine expérience sur des frameworks équivalents. Sur youtube, un tutoriel permetant de faire un clone du celèbre jeu Mario semblait assez facile d'accès. Après avoir fait ce tutoriel et avoir approximativement compris 21% de ce qui y était fait, les premiers tatons  commencent. Nathan fait une carte et Edwin tente de cliquer sur un rectangle et d'en retourner la classe. Après ces premiers chipotages avec plus ou moins de réussite, vient le temps où on tente de cliquer sur un élément de la carte de Nathan et d'en retourner un des objets. Nouvelle réalisation: "C'est pas tout de faire des petits modules, encore faut il pouvoir les faire chanter ensemble".</p>
<p>À ce stade du projet, une semaine avant la semaine de vacances du 15 avril, certains groupes semblent avoir une bonne base et commence à poser du coder sérieux. De notre coté, plus le temps passait, plus on prenait conscience de notre ignorance. La motivation était faible et certaines tensions apparaissait.</p>
<p>Lors d'une petite session de grosse galère à tenter de faire fonctionner deux composantes ensemble Nathan et moi avons l'idée de voir si nous pouvons trouver de la documentation spécifique à LibGDX à la bibliothèque. On nous dit que des livres existent mais ne sont pas disponible chez nous. Après un petit tour sur des sites de vente de livre au format numérique on se décide à un acheter un. "Beginning Java Game Development with LibGDX" de Lee Stemkoski. Lee, si jamais tu lis ces lignes, un grand merci. Sans toi, rien de tout ce qui a été fait n'aurait été possible. Nous avons choisis ce livre un peu par hasard. Les review étaient bonnes et nous nous retrouvions bien dans le titre. Nous étions loin d'imaginer la perle que c'était. Malgré un début très basique à base d'explications sur ce qu'est l'héritage, rapidement le niveau augmente. Au fur et à mesure des chapitres qui sont chacun un petit jeu qui couvre un aspect de LibGDX, Lee nous fait construire notre propre framework au dessus de LibGDX.</p>
<p>La semaine de vacances est vraiment tombée à pic. Tel un séjour en immersion dans un pays étranger pour en apprendre la langue, il est possible de faire la même chose avec un langage informatique ou un framework, c'est juste une question d'état d'esprit. Au pays de LibGDX guidé par les conseils de Lee, le temps passait en moyenne 4 fois plus vite. je me suis tellement laisser absorber que j'en ai risqué la tranquilité de mon couple. Tout prenait enfin forme, tout était lié et c'était tellement gratifiant d'enfin avoir des résultats tangibles et controlés. Bon ok... une tortue qui bouge dans 4 directions et se fait bloquer par des rochers c'est pas terrible dans le conscient colectif, mais moi personnellement je me sentais très fier de ma petite tortue, elle et moi, on se comprenait.</p>
<p>Ce qui ressort particulièrement de la lecture du livre de Lee Stemkoski, était l'idée du framework au dessus de LibGDX, une bonne façon de structurer le code tout en créant une abstraction suffisante pour permettre à l'utilisateur du framework de s'occuper de problèmes plus spécifique à son jeu.</p>
<p>Suite à la lecture du livre ainsi que de la création assistée de 6 petits jeux qui couvrent chacun un aspect spécifique de LibGDX je me sentais confiant dans le fait d'être capable de réaliser une première architecture valable. Une architecture qui nous permetrait à tous les trois de travailler de façon indépendante. Même si le livre ne couvrait absolument pas le sujet épineux des jeux de stratégie en temps réel, il a apporté une base de savoir suffisante pour permettre de faire des recherches ciblée et efficaces. On était loins d'être arrivés, mais à ce moment là <strong>le projet était finalement initié</strong>.</p>
</blockquote>
<div style="page-break-before:always"></div><h2>Planification</h2>
<h3>Objectifs</h3>
<p>Dans le chapitre concernant les jeux de stratégie en temps réel ressortent les 3 mots clés qui définissent le genre: <strong>récolter</strong>, <strong>construire</strong> et <strong>détruire</strong>. Il est donc nécessaire que le MVP comporte ces trois éléments de gameplay. En plus de ces trois éléments les objectifs suivants sont concidérés comme ceux à atteindre:</p>
<ul>
<li>Une carte ("plateau de jeu") sur lequel se passe l'action</li>
<li>Menu principale</li>
<li>Une interface utilisateur qui contient les éléments suivants:
<ul>
<li>Une mini carte qui donne une vue global au joueur de l'action</li>
<li>Affichage des ressources</li>
<li>Affichage de la population</li>
<li>Un panneau qui contient les actions spéciales qui affiche les actions que peut effectuer l'unité selectionnée</li>
<li>Un "curseur intelligent" qui en fonction du type d'entité selectionné, du type de clic effectué et de l'endroit de ce dernier effectue l'action adéquate.</li>
</ul>
</li>
</ul>
<p>Cette première itération du jeu se veut être un proof concept. L'ajout d'un adversaire, IA ou un autre joueur à travers le réseau n'est pas un objectif réaliste et n'est considéré que dans les objectifs secondaires au même titre que les points suivants:</p>
<ul>
<li>Brouillard de guerre</li>
<li>IA qui gère un certain nombre d'actions sans l'intervention du joueur</li>
<li>Multijoueur: Adversaire IA</li>
<li>MultiJoueur: Adversaire humain</li>
<li>Donner une âme au jeu:
<ul>
<li>Aspect esthétique</li>
<li>Contexte du jeu</li>
<li>Bruitages et musiques</li>
</ul>
</li>
<li>Rendre le jeu fun à jouer via:
<ul>
<li>Mécanisme de brouillard de guèrre</li>
<li>Réflexion sur les unités du jeu</li>
<li>Ajout de nouveaux bâtiments</li>
</ul>
</li>
</ul>
<div style="page-break-before:always"></div><h3>Organisation et logistique</h3>
<h4>Trello</h4>
<p>Trello (<a href="trello.com">trello.com</a>) est une application permettant de gérer des projets et tâches en équipe. Très pratique pour la planification ainsi que l'organisation, cette application est basée sur la méthode "Kanban".</p>
<img src="https://i.imgur.com/Ks5Yu5H.png" width="800">
<br><p style="text-align: center">Trello du projet dans un stade avancé</p>
<div style="page-break-before:always"></div><p>Chaque carte contient un espace organisationnel supplémentaire comprenant:</p>
<ul>
<li>Des liens utiles trouvés par les membres</li>
<li>Des captures d'écran de l'avancement ainsi que divers médias</li>
<li>Une todo découpant la tâche de la carte en sous-tâches élémentaires</li>
<li>Une section commentaire</li>
</ul>
<br>
<p><img src="https://i.imgur.com/ImGMuRO.png" alt="Image"></p>
<div style="page-break-before:always"></div><h4>TeamViewer</h4>
<p>TeamViewer (<a href="www.teamviewer.com">www.teamviewer.com</a>) est un logiciel qui permet d'accéder à distance à une machine. Principalement utilisé pour du partage d'écran, cet outil s'est révélé précieux pour pouvoir faire de l'Extreme Programming.</p>
<h3>Répartition des tâches</h3>
<p>La répartition des tâche au sein des membres est la suivante:</p>
<ul>
<li><strong>Nathan Latino</strong>: Interface utilisateur et graphisme</li>
<li><strong>Edwin Claude</strong>: Path finding, brouillard de guère, menu principal</li>
<li><strong>Sol Rosca</strong>: Architecture, Framework et rédaction du rapport</li>
</ul>
<p>Concernant la rédaction du présent document, <strong>chacun est responsable des parties le concernant</strong> et Sol est en charge du reste.</p>
<div style="page-break-before:always"><div class="ui grid">
<div class="two column row">
<div class="column">
<img src="https://i.imgur.com/9lqW5lu.jpg" height="1200"> 
</div>
<div class="column">
<h3>Planning</h3>
<p> Comme expliqué dans le chapitre sur l'initiation du projet, ce planning ne reflète pas la réalité des proportions du temps passé sur les divers points. Le travail sur le projet ne commence vraiment qu'à partir de la semaine du 22 avril.
</p>
</div>
</div></div><div style="page-break-before:always"></div><h2>Conception</h2>
<h3>Techniques de programmation</h3>
<h4>Extreme programming</h4>
<p>Plus particulièrement la partie "binôme" de cette pratique. Cette technique a l'avantage de pouvoir se pratiquer physiquement sur la même machine mais aussi à distances avec des outils comme TeamViewer.</p>
<ul>
<li>"Puisque la revue de code est une bonne pratique, elle sera faite en permanence"</li>
<li>"Puisque la conception est importante, elle sera faite tout au long du projet (refactoring) "</li>
<li>"Puisque la simplicité permet d'avancer plus vite, nous choisirons toujours la solution la plus simple "</li>
<li>"Puisque la compréhension est importante, nous définirons et ferons évoluer ensemble des métaphores"</li>
</ul>
<h4>Développement itératif</h4>
<p>Cette pratique s'est mise en place d'elle même, elle n'est probablement pas le reflet de la pratique "officielle" et donc, voici notre interpretation:</p>
<p>Cette technique se base sur trois itérations successives pour implémenter une feature:</p>
<ul>
<li><strong>Une première itération naive</strong>: Ne prend pas en compte la qualité et l'optimisation du code mais se concentre sur la faisabilité.</li>
<li><strong>Une seconde itération qui simplifie</strong>: Nétoie le code et tatonne plusieurs patternes/architectures pour tenter de trouver les avantages et incovénients.</li>
<li><strong>Une dernière itération "présentable"</strong> Consiste en une réécriture du code pour coller à un pattern/architecture qui est le fruit des leçons tirés des précédentes itérations.</li>
</ul>
<h3>Git flow</h3>
<img src="https://i.imgur.com/NzmewW9.png" style="float: right; border: 1px solid #ccc; width: 440px; margin-left: 15px">
<p>Le flow utilisé était "Feature Branche". Chaque nouvelle feature a sa propre branche et est merge sur la branche de developpement (dev) à la complétion de son objectif. La branche dev n'est merge avec le master qu'une fois qu'un des objectif principal est atteint. Contrairement à l'illustration précédente, ce projet n'avait pas de versioning des milestones.</p>
<div style="page-break-before:always"></div><h3>Spécifications</h3>
<h4>Jeu</h4>
<ul>
<li><strong>Plateforme</strong>: Desktop</li>
<li><strong>Os</strong>: Windows &amp; Linux</li>
<li><strong>Langage</strong>: Java</li>
<li><strong>Framework</strong>: LibGDX</li>
<li><strong>Genre</strong>: Stratégie</li>
<li><strong>Sous-genre</strong>: Temps réel</li>
<li><strong>Perspective</strong>: 2.5D (Topdown)</li>
<li><strong>Camera</strong>: projection orthogonale</li>
<li><strong>Controle</strong>: Clavier + souris</li>
<li><strong>Joueurs</strong>:
<ul>
<li>1 joueur humain (proof concept)</li>
<li>Dans un premier temps une faction adverse sans inteligence sera utilisé pour tester les capacités offensives.</li>
</ul>
</li>
<li><strong>Contexte scénaristique</strong>: Aucun (le jeu sera dans un premier temps générique)</li>
<li><strong>Population</strong>:
<ul>
<li>Limitée</li>
<li>Nécessité de construire des "maisons" pour augmenter la limite</li>
</ul>
</li>
<li><strong>Économie</strong>:
<ul>
<li>Récolte de ressources</li>
<li>Sert à finnancer la production de bâtiments et d'unités</li>
</ul>
</li>
<li><strong>Ressources</strong>:
<ul>
<li>En quantité limitée</li>
<li>Un type de ressource unique</li>
<li>Recoltable sur la carte sur des points spécifiques</li>
</ul>
</li>
</ul>
<h4>Carte</h4>
<p>La carte est l'air de jeu. C'est une aggrégation de cellules sur un plan orthonormé d'une certaine taille. C'est sur la carte que se passe l'action du jeu.</p>
<ul>
<li><strong>Cellule</strong>:</li>
<li>Est repérée par une position dans un repère orthonormé</li>
<li>Une cellule est un conteneur</li>
<li>Une cellule peut contenir un unique élément parmis plusieurs types d'entités:
<ul>
<li>Du vide</li>
<li>Un obstacle naturel</li>
<li>Une ressource</li>
<li>Une entité appartenant à un joueur</li>
</ul>
</li>
<li>Un joueur peut influencer sur une cellule avec des:
<ul>
<li>Entités statiques</li>
<li>Entités mobiles</li>
</ul>
</li>
</ul>
<div style="page-break-before:always"></div><h4>Entités</h4>
<ul>
<li>Naturelles</li>
<li><strong>Interactives</strong>
<ul>
<li>Un élément qui peut être récolté (une ressource)</li>
<li>Une ressource possède une quantité définie non rechargeable de points de cette ressource que les joueurs doivent récolter.</li>
</ul>
</li>
<li><strong>Décor</strong>
<ul>
<li>Un élément figé, il n'est pas destructible ou collectible</li>
<li>C'est principalement un obstacle, une zone où la contruction et le déplacement sont impossible</li>
</ul>
</li>
<li>Créées par le joueur</li>
<li><strong>Statique</strong>
<ul>
<li>bâtiments</li>
<li>Appartient à un joueur</li>
<li>Possède un nombre de points de vie</li>
<li>Peuvent être de deux types:
<ul>
<li>De productions: production d'unités</li>
<li>Utilitaires: Augmente la population maximum</li>
</ul>
</li>
</ul>
</li>
<li><strong>Mobile</strong>
<ul>
<li>Unités</li>
<li>Appartient à un joueur</li>
<li>Possède un nombre de points de vie</li>
<li>Se déplacent</li>
<li>Peuvent être de deux types:
<ul>
<li>Utilitaire:</li>
<li>Récolte des ressources</li>
<li>Construit des bâtiments</li>
<li>Offensif:</li>
<li>Peut attaquer</li>
</ul>
</li>
</ul>
</li>
</ul>
<div style="page-break-before:always"></div><h4>Récolte</h4>
<p>La ressource récoltable est le nerf de la guerre. Elle se trouve en quantité limité sur la carte dans des cellules contigues dont l'affichage reflète cette état.</p>
<p>Ces cellules possède un certain nombre de points de ressource et sont épuisables. Un click sur la cellule permet d'avoir des information sur sa quantité de ressouce.</p>
<p>Ces ceullues peuvent être exploitées par une <strong>unité utilitaire</strong> qui peut transporter un nombre finit de ressource. Chaque unité de temps $t$ une resource est transférée de la cellule à l'unité utilitaire. Une fois plein, l'unité utilitaire retourne automatiquement au bâtiment principal (base) et les ressources qu'elle contient sont transférées au pool de ressource du joueur.</p>
<p>Pour initier ce méchanisme, le joueur doit selectionner une ou plusieurs unitées utilitaires et cliquer droit sur une cellule contenant des ressources.</p>
<p>Ce méchanisme se poursuit tant que le joueur ne selectionne pas une des unité utilitaire à la tache et ne la déplace sur une cellule sans ressource.</p>
<p>Une fois la ressource épuisee, la cellule devient une cellule vide (sa texture change en conséquant).</p>
<h4>Inputs</h4>
<ul>
<li>Selections:</li>
<li>click gauche sur une entité permet d'afficher des informations la concernant.</li>
<li>click gauche maintenu permet de faire un cadre de selection qui selectionne plusieurs entités mobiles crées par le joueur.</li>
<li>click droit sur une entité sans selection préalable ne fait rien.</li>
<li>click droit sur une entité avec une selection:
<ul>
<li>si l'entité possède des points de vie et n'est pas de l'équipe du joueur, donne l'ordre d'attaquer.</li>
<li>si l'entité est amie, elle s'y rend.</li>
<li>si l'entité est un élément de décor, ne fait rien.</li>
</ul>
</li>
<li>click drouasoit sur une cellule vide avec une selection:
<ul>
<li>la selection s'y rend.</li>
</ul>
</li>
<li>Déplacement de la camera:</li>
<li>avec les touches fléchées du clavier (NSEW + diagonales)</li>
</ul>
<h4>Déroulement d'une partie</h4>
<p>Au début d'une partie, le joueur se retrouve au commandement d'un bâtiment principale ainsi que une petite troupe ($n$ à définir) d'unitées utilitaires. Un certain nombre de crédit (ressource) lui sont alloués. Le bâtiment principal permet de produire de nouvelles unitées utilitaires qui elles mêmes peuvent construire des bâtiments de production d'unitées offensives ou des bâtiments utilitaires pour augmenter la population. Le bâtiment principal offre une certaine limite de population qu'il est nécessaire de faire augmenter au fur et à mesure de la production d'unitées. Cette augmentation de la population se fait par la construction de nouveau bâtiments utilitaires ("maisons").</p>
<p>Pour assurer sa pérénité, il est nécessaire que le joueur investisse des unitées utilitaires dans la récolte de ressources qu'il investira dans de nouvelles unitées utilitaires ou des bâtiments de production d'unitées offensives pour au final amasser une armée suffisante pour détruire le joueur advèrse.</p>
<h3>Conventions</h3>
<ul>
<li>Le code suit la convention K&amp;R.</li>
<li>Les noms du code sont écrits en anglais.</li>
<li>Les distances se mesurent en pixels et l'origine est en bas à gauche</li>
</ul>
<h3>Premier diagramme de classes</h3>
<p>Le diagramme 1 (page suivante) est ici pour la forme, il fait partie des délivrables préliminaires lors de la phase de conception et ne tient pas compte de LibDGX. Il illustre les premières réflections sur ce qui semblait être des points importants. Aucune implémentation de ce diagramme n'a été faite.</p>
<div style="page-break-before:always"><img src="https://i.imgur.com/hkFvwDM.jpg" alt="" class="ver-img">
<span class="diag-caption">Diagramme 1</span></div><div style="page-break-before:always"></div><h2>Réalisation</h2>
<h3>Architecture</h3>
<p>L'architecture de ce projet a vu de nombreux remaniement complets avant de prendre sa forme actuelle. Ceci est dû à plusieurs choses:</p>
<ul>
<li>Dans un premier temps la méconnaissance de LibGDX</li>
<li>Dans un second temps la compréhension plus profonde de subtilités de LibGDX</li>
<li>Une simple volontée d'expérimenter</li>
<li>Une nécessité imposée par les spécificités intrinsèques du genre "Stratégie en temps réel" qui cumule d'un côté un nombre conséquent de modules qui fonctionnent et communiquent ensembles et de l'autre une grande variété dans les types d'entités.</li>
</ul>
<p>La complexité structurelle du dernier point fait qu'il existe <strong>une sorte de moment critique</strong> dans l'implémentation du framework. Ce moment est la transition entre l'implémentation des mécanismes de base (affichage, selection, déplacement, collision, ...) et la spécialisation de ces mécanismes.</p>
<p>À bas niveau, la cause principale du problème est un <strong>trop grand couplage</strong> entre les classes qui composent ces mécanismes. La conséquence immédiate est le manque de robustesse et la difficulté de maintenir le programme.</p>
<p>À plus haut niveau, c'est la spécialisation des classes qui forment la <strong>hiérarchie des entités</strong> qui pose problème. La conséquence est une éternelle envie de refactor du code pour tenter une optimisation utopique à chaque ajout de nouvelle entité.</p>
<p>Pour résoudre ces problèmes, il a été décidé de découper le projet en deux parties. Une partie <strong>framework</strong> dont le but est de permettre à son utilisateur de travailler à un niveau d'abstraction élevé et une partie <strong>YARTS</strong> qui est la concrétisation du projet.</p>
<p>Les prochains points de ce chapitre illustre et détaillent les différentes approches expérimentées dans leur ordre chronologie pour pouvoir proposer un framework robuste et modulable.</p>
<div style="page-break-before:always"></div><h4>Vue d'ensemble</h4>
<p>Avant de parler des différentes approches il est important de comprendre la structure générale du programme et sa relation avec LibGDX.</p>
<p>Le diagramme qui suit est une représentation haut niveau de l'application et est le fruit des enseignements du livre de Lee Stemkoski décrit dans le chapitre introductif de ce document.</p>
<p>Chaque couche de ce diagramme est un élément indépendant des autres et cette représentation ne décrit pas l'architecture de chaque couche mais se content de délimiter trois niveaux d'abstraction:</p>
<ul>
<li>Le plus bas niveau: <strong>LibGDX</strong></li>
<li>Le bas niveau: <strong>Framework</strong></li>
<li>Le haut niveau: <strong>Client (YARTS)</strong></li>
</ul>
<img src="https://i.imgur.com/IT9snFq.png" alt="" width="500" style="float: right; padding-left:20px">
<p>L'idée est de ségréguer les différentes classes dans une plage allant des "détails de bas niveau" aux "concepts de haut niveau". Si la structure est réalisée correctement, le code <strong>Client</strong> devrait pouvoir réaliser à l'aide des outils exposés par le <strong>Framework</strong> un jeu complet sans jamais avoir à appeller directement <strong>LibGDX</strong>.</p>
<p>Ce dernier point mérite une explication: Le but du <strong>Framework</strong> est de permettre de créer facilement (à l'aide d'abstractions importantes des outils de <strong>LibGDX</strong>) un jeu. Mais attention, il est important d'être conscient que <strong>qui dit facilités, dit limitations vis à vis de ce qui pourait être fait avec LibGDX directement</strong>.</p>
<p>Aussi, il est important de comprendre que le <strong>Framework</strong> ne devrait pas être spécialisé dans un type de jeu en particulier. Il devrait pouvoir facilier la création de tout types de jeu 2D.</p>
<p>Le code de l'application se trouve réparti entre <strong>Framework</strong> et <strong>Client</strong> et les descriptions qui suivent peuvent être considérées comme les spécifications de l'architecture (ce qu'elle doit permettre d'accomplir). En effet, même si l'architecture du <strong>Framework</strong> à changé de nombreuses fois, la vison globale elle est resté la même:</p>
<h5>Framework</h5>
<p>Le niveau <strong>Framework</strong> est le coeur de l'application et est lui même découpé en plusieurs niveaux d'abstraction:</p>
<ul>
<li><strong>Bas niveau</strong>: Ici se trouvent des <em>façades</em> spécialisées qui cachent la complexité liée à <strong>LibGDX</strong> et regroupent les fonctionnalités par catégories. Elles sont également en charge des diverses normalisations de valeurs qui leurs sont spécifiques à l'aide de classes <em>adapter</em>. En effet, <strong>LibGDX</strong> n'utilise pas les mêmes systèmes de coordonnées dans tous ses modules. Par exemple, la physique utilise des unités SI et l'origine se trouve en bas à gauche, la camera utilise des pixels et son origine est en haut à gauche. Les acteurs et les scènes utilisent des pixels avec l'origine en bas à gauche... Il a été décidé qu'au sein du <strong>Framework</strong> tout se calculerait en pixels avec l'origine en bas à gauche et c'est les classes de ce niveau qui sont en charge de la gestion de cette abstraction. Les classes de ce niveau sont en principe les seules à communiquer directement avec <strong>LibGDX</strong>. Elles sont le <em>bridge</em> entre <strong>LibGDX</strong> et le <strong>Framework</strong></li>
<li><strong>Niveau intermédiaire</strong>: Le coeur du <strong>Framework</strong>. Tous les mécanismes de base essentiels à la création d'un jeu se trouve dans cette couche du <strong>Framework</strong>.</li>
<li><strong>Haut niveau</strong>: Ici se trouve les plus grosses abstractions du <strong>Framework</strong>. Ce sont ces classes qui sont exposées au client et se sont normalement les seules qu'il doit utiliser. Ces classes sont de deux sortes:</li>
<li>Des classes abstraites dont la concrétisation sert de "cadre de travail" au client. Chacune expose des méthodes spécifiques à un aspect concret d'un jeu que le client peut soit redéfinir pour y injecter sa logique soit query pour récupérer des informations (comme des événements par exemple).</li>
<li>Des <em>abstract factory</em> qui permettent de composer ses propres entités concrètes.</li>
</ul>
<div style="page-break-before:always"></div><h5>Client</h5>
<p>Comme vu précédement, le <strong>Client</strong> utilise le framework pour créer des classes de convénience de plus haut niveau et injecte sa logique dans les classes "cadre de travail" du <strong>Framework</strong>.</p>
<p>Dans le cas de YARTS, le client crée des entités qui possèdent des points de vie et qui se déplacent à une certaine vitesse. Il ne s'encombre pas avec tous les mécanismes sous jacents comme la gestion des points de vie ou la physique qui régule la vitesse de déplacement. Il peut influencer ces mécanismes dans une certaine mesure mais il est possible d'imaginer que les réglages par défaut lui conviennent et que tout ce qu'il doit faire pour afficher un soldat est d'appeler une factory, lui passer une sprite sheet qui contient les animations en spécifiant la taille d'une cellule et le tour est joué. Ce soldat ainsi créé sera est selectionnable, se déplace (en affichant l'animation correspondant à son état et son orientation) à l'endroit où le joueur clique droit. Si un obstacle entrave la route du soldat, il l'évite. Si le soldat rencontre une entité ennemie, il l'a poursuit et l'attaque automatiquement dés qu'il la rattrape. Tous ces mécanimse s'exécutent sans que le code client n'ai eu à implémenter quoi que ce soit.</p>
<p>Autrement dit, le <strong>Framework</strong> offre la possibilité au client de réfléchir en terme haut niveau de "jeu de stratégie en temps réel" et non en terme bas niveau comme des angles, des distances, ou de gestion de textures, ... Les préocupations du client sont de l'ordre de l'équilibrage des points de vie des unités par rapport au dégats qu'elles font, leur vitesse de déplacement et l'apparence qu'elles ont.</p>
<p>Le mécanisme qui permet au client d'injecter de la logique dans les classes qu'il dérive lui permet de définir des comportements ou des actions plus complexes comme de donner la possibilité à son soldat d'utiliser une arme spéciale qui fait plus de dégats mais qui nécessite un long temps de chargement en cliquant sur une icone qui apparaitrait automatiquement dans l'interface quand cette unité est selectionnée. Ou même de lui permettre de construire des bâtiments qui tout comme l'arme spéciale apparaitraissent sous forme d'icones dans l'interface.</p>
<p>Dans le même ordre d'idées, le <strong>Client</strong> peut créer un mécanisme qui lui permet créer une entité aux allures de bâtiment à laquelle il assignerait une vitesse de déplacement nulle et qui en réalité cacherait une <em>factory</em> de soldats. Dans le jeu, une fois construit, lors de la selection de ce batiment, une icone cliquable dans l'interface permet d'instancier des soldats qui apparaissent à coté du bâtiment. Tous ces soldats ont le même comportement que le soldat original.</p>
<div style="page-break-before:always"></div><h5>Avantages</h5>
<ul>
<li><strong>Robustesse</strong>:
<ul>
<li>Des changements dans le code à un niveau particulier n'impacte que modérément les autres niveaux voir pas dutout.</li>
<li>La ségrégation des classes facilite le debug en simplifiant l'isolation des comportements et donc l'identification de la source du bug.</li>
<li>Facilite le refactoring / modification.</li>
</ul>
</li>
<li><strong>Garde la complexité sous contrôle</strong>:
<ul>
<li>Favorise des implémentations qui suivent le principe de responsabilité unique ce qui résulte en un code plus clair.</li>
</ul>
</li>
</ul>
<p>De nombreuses façons permettent d'arriver à ces comportement et la première tentative fut naturellement axée sur un usage important de l'OOP.</p>
<h4>Approche OOP</h4>
<p>Le diagramme 2 (page suivante) représente une vue simplifiée de la première approche. Dans le package "actors" contenu dans "Framework", on voit une ébauche de l'arbre d'héritage des entités. Cet arbre n'est pas complet et dans la pratique, plusieurs variantes modélisées sur papier ont été tentées. Dans le package "YARTS" on peut voir un second package "actors" qui contient des concrétisations issues de l'arbre d'héritage.</p>
<div style="page-break-before:always"></div><img src="https://i.imgur.com/wD9VyDb.jpg" height="1200">
<span class="diag-caption">Diagramme 2</span>
<div style="page-break-before:always"></div><p>Cette approche est naturelle, et pour peu que l'architecture des relations et de la communication entre les classes qui se chargent des mécanismes de base implémente les bon patterns, le résultat est fonctionnel et relativement robuste. Le problème vient principalement du coté de l'arbre d'héritage des entités.</p>
<p>En effet, dans cette implémentation, chaque entité est un objet. Le système d'instanciation est donc basé sur des classes et permet à une entité d'en étendre une autre tout en jouissant de comportements polymorphiques.</p>
<p>Poussée au maximum, cette façon de faire conduit à une grande hiérarchie de classes rigide où La difficulté de définir la place d'une nouvelle entité est proportionnelle à la taille de la hiérarchie. Le diagramme suivant illustre ce problème:</p>
<img src="https://i.imgur.com/6htNNE9.png" alt="" width="450">
<p>Une solution à ce problème serait de ne pas baser la gestion des entités sur l'héritage mais sur de la composition d'objets.</p>
<div style="page-break-before:always"></div><h4>Approche OOP + composition (ECS naif)</h4>
<p>Dans cette approche, la construction d'entités ne se fait plus via héritage mais via composition tout en tirant profit du polymorphisme en définissant une interface <code>Entity</code>. Une entité devient une aggrégation (techniquement une composition) de composants et chaque composant encapsule la logique qui le concerne ainsi qu'une référence vers l'entité qui le contient:</p>
<img src="https://i.imgur.com/L8T7ZC9.png" width="750">
<p>Malgré une tête de sphagetti et une complexité apparente dans la modélisation, un système de gestion des entités basé sur ce système possède les avantages suivants:</p>
<ol>
<li>Il est aisé d'ajouter une nouvelle entité.</li>
<li>Possibilité de dynamiquement ajouter ou retirer des composants (et donc de modifier le comportement).</li>
<li>Pour un grand nombre d'entités (ce qui est le cas pour un jeu de stratégie en temps réel) plus de performances.</li>
</ol>
<p>Par contre, cette façon de faire est d'une part plus verbeuse dans le code et d'autre part déplace le problème de la complexité dans les composants. En effet, certains comportements peuvent être sensiblement différents en fonction de l'entité qui l'utilise. Aussi, le code qui gère la logique a tendance à se charger de batteries de conditionnels à mesure que le nombre d'entités grandit.</p>
<p>Dans YARTS, cette technique a été employée sans nécessiter une réécriture complète du code. Il n'existe donc pas de diagramme décrivant cette architecture.</p>
<div style="page-break-before:always"></div><h4>Approche ECS</h4>
<p>ECS veut dire Entity Component System et cette approche se base sur la précédente et pousse son concepte à l'extrême. En bref, les <code>Entity</code> sont les objets du jeu et sont définies implicitement par une collection de <code>Components</code>. Ces Components ne contiennent que des données et sont opérés en groupes fonctionnels par des <code>Systems</code>.</p>
<h5>Component</h5>
<p>Un component est un simple conteneur. Une classe qui implémente un component a des attributs mais pas de methode. Chaque component décrit un certain aspect d'une entité ainsi que ses paramètres. En soit, un component, n'est pas grand chose et c'est leur cumule qui est interessant. Voici un exemple de composants:</p>
<ul>
<li><code>Position(x, y)</code></li>
<li><code>Velocity(x, y)</code></li>
<li><code>Physics(body)</code></li>
<li><code>Sprite(images, animations)</code></li>
<li><code>Health(value)</code></li>
<li><code>Dammages(value)</code></li>
</ul>
<h5>Entity</h5>
<p>Dans le cadre de l'ECS, une entité est un concepte, mais peut être vu comme un objet du jeu. Par exemple, un rocher, une maison ou un soldat. Fondamentalement elle n'est définie que par les composants qui le constitue et un ID. Il est possible d'ajouter ou de retirer des composants pendant l'exécution, ce qui se traduit en une façon fondamentalement différente d'aborder les choses. En effet, dans une vision ECS des choses, on peut imaginer qu'une de nos entité est un mage qui peut geler les soldats adversaires. Ces soldats sont eux mêmes des entités et si ils sont touchés par le sort de glace du mage, il suffit de leur retirer leur component Velocity pour les clouer sur place. À partir des composants précédents on peut imaginer les Entités suivantes:</p>
<ul>
<li><code>Rock(Position, Sprite)</code></li>
<li><code>Ball(Position, Velocity, Physics, Sprite)</code></li>
<li><code>Wizard(Position, Velocity, Sprite, Health, Damages)</code></li>
</ul>
<div style="page-break-before:always"></div><h5>System</h5>
<p>Les systèmes sont le coeur de la logique de l'ECS. Un système opère sur une combinaison de composants spécifique. Par exemple, Le système <code>MovementSystem</code> peut opérer sur les entités composées des components <code>Postion</code> et <code>Velocity</code> et contient toute la logique qui permet de déplacer des entités. Chaque système, et dans l'ordre d'instanciation de tous les systèmes sera mis à jour idéalement 60 fois par seconde. Voici quelques définitions de systèmes:</p>
<ul>
<li><code>MovementSystem(Position, Velocity)</code>: Applique une vélocité à l'entité qui possède Position</li>
<li><code>GravitySystem(Velocity)</code>: Applique une accélération à l'entité qui possède Velocity</li>
<li><code>RenderSystem(Position, Sprite)</code>: Affiche les entités qui possède Position et Sprite</li>
</ul>
<h5>Implémentation</h5>
<p>Le diagramme 3 est particulier dans le sens où il montre une représentation logique des Entités. Cette hiérarchie n'existe pas en tant que tel dans le code. Seul les composants existent. Par contre dans le code, la classe <em>EntityFactory</em> se sert de cette représentation pour limiter le répétition de code.</p>
<img src="https://i.imgur.com/LEegadd.jpg" height="950">
<span class="diag-caption">Diagramme 3</span>
<br>
<br>
<p>Cette représentation a servi à l'implémentation initiale du système ECS de YARTS. Depuis, certains Components ont étés modifiés et d'autres ont été ajoutés.</p>
<div style="page-break-before:always"></div><h4>Conlusion sur l'architecture</h4>
<p>Pour le choix de l'implémentation à retenir, les trois critères ont été évalués:</p>
<ul>
<li>Performance</li>
<li>Complexité du code</li>
<li>Maintenabilité</li>
</ul>
<h5>Performance</h5>
<p>Un test interne à YARTS permet d'instancier un grand nombre d'entités sur la carte. Une entité ayant approximativement les mêmes fonctionnalités a été créé dans chaque implémentation.
Ces fonctionnalités sont: Texture et Animation, Physique et Detection de collision. Pour ce test, tous les effets de lumière et d'ombre sont retirés. Le tableau suivant représente les résultats. Les ordonnées représentent le nombre d'entités. Les Abscisses, le type d'implémentation. Au centre se trouve les valeurs obtenues exprimées en images par seconde (fps).</p>
<table>
<thead>
<tr>
<th></th>
<th>OOP</th>
<th>OOP + Comp</th>
<th>ECS</th>
</tr>
</thead>
<tbody>
<tr>
<td>50</td>
<td>60 fps</td>
<td>60 fps</td>
<td>60 fps</td>
</tr>
<tr>
<td>200</td>
<td>32 fps</td>
<td>15 fps</td>
<td>60 fps</td>
</tr>
<tr>
<td>500</td>
<td>9 fps</td>
<td>1 fps</td>
<td>60 fps</td>
</tr>
<tr>
<td>1000</td>
<td>1 fps</td>
<td>1 fps</td>
<td>53 fps</td>
</tr>
<tr>
<td>10000</td>
<td>crash</td>
<td>crash</td>
<td>2 fps</td>
</tr>
</tbody>
</table>
<br>
<p>Il est remarquable que les performances de la variante OOP + Composition soit si faible en comparaison de la version OOP. Il est probable qu'un problème dans l'implémentation fausse les résultats. Malgré ça, il est improbable que même avec un code optimal l'issue du test soit différent. L'ECS est sensiblement plus performant que les deux autres implémentations et cette information colle avec ce qu'on trouve sur le net.</p>
<h5>Complexité du code</h5>
<p>Ce test est relativement subjectif et se base sur l'impression de complexité dans le codes des 3 implémentations à fonctionnalités égales.</p>
<p>Les deux premières variantes sont approximativement de la même complexité. Dans la version OOP, la complexité se trouve dans les dérivées de la classe mère Entity. Dans la version OOP + Composition, elle se trouve dans les Components. De plus, il est important de noter que les mêmes problèmes apparaissent approximativement au même stade de développement.</p>
<p>L'ECS a une philosophie totalement différente dans son fonctionnement et il n'est pas évident de raisonner en mode ECS lors de l'implémentation des systèmes. Pour donner un ordre d'idée c'est un peu la même difficulté de réflection que les premiers pas en programmation concurente. De plus l'utilisation de l'ECS a empéché l'utilisation d'autres systèmes de LibGDX et a donc nécessité l'implémentation d'un équivalent. Dans ce contexte, il est à noter qu'après quelques refactor, la complexité générale du code est restée plus faible que dans les deux autres implémentations. Avec la version ECS, au stade de développement actuel, on remarque que les problèmes des variantes OOP n'apparaissent pas. Le code est relativement robuste et il est très simple d'ajouter de nouveaux mécanismes.</p>
<h5>Maintenabilité</h5>
<p>Comme expliqué précédement, les versions OOP, passé un certain stade sont difficiles à maintenir. Il est probable qu'une meilleur architecture les concernant puisse résoudre ou améliorer la situation.
La variante ECS quant à elle, est très flexible. Il est vraiment aisé d'ajouter de nouveaux components/systèmes.</p>
<p>De ces tests il ressort que l'ECS est l'implémentation qui est la plus performante, lisible et maintanable. Ces résultats sont en concordance avec ce qui se trouve sur le net dans le cadre d'un jeu de stratégie en temps réel. C'est donc cette implémentation qui est retenue pour coder YARTS.</p>
<p>La version actuelle du code implémente l'approche ECS à l'aide du module Ashley de LibGDX. Ce module augmente les performance vis à vis de l'implémentation manuelle en offrant des conteneurs spécialisés et optimisés pour le système.</p>
<div style="page-break-before:always"></div><h3>Mécanismes</h3>
<p>De nombreux mécanismes ont dû être implémentés pour avoir un jeu fonctionnel. Certains, comme le pathfinding ou la gestion des collisions sont fort documentés sur le net et des classes existent dans LibGDX qui en facilitent l'implémentation. D'autres, au contraire sont peu documentés. En règle générale, les mécanismes spécifiques aux jeux de stratégie en temps réel sont peu représentés. Cela dit, il est toujours possible de trouver des éléments de réponse dans l'un ou l'autre fil de discussion.</p>
<p>Chaque mécanisme de ce programme, petit ou grand a nécessité un temps considérable de réflection, de recherche et de raffinement pour d'une part se l'approprier et d'autre part faire en sorte qu'il s'intègre au mieux dans le framework tout en restant le plus générique possible. De la même façon, les décrire dans ces pages nécessite tout autant de minutie et se trouve être un exercice particulièrement complexe mais surtout trop long. Il ne sera donc présenté ici qu'une selection de mécanismes et l'impasse sera faite sur les tests effectués sur ces derniers.</p>
<div style="page-break-before:always"></div><h4>Debugging et configuration</h4>
<p>Pour une application de ce genre, il est crucial de pouvoir afficher des informations utiles au développement pendant l'exécution. Pour se faire, des mécanismes parallèles de debugging ont été mis en place. Il sont de deux types, logging (console) et render (dans le jeu). Le <em>singleton</em> <code>Conf</code> contient toutes les variables qui permettent d'activer ou de désactiver ces mécanismes de debug. Cette classe centralise également toutes les valeurs qui touchent à la configuration du jeu (résolution, full screen, constantes de conversion d'unités, ...). Tous les autres parties du framework utilise ce fichier ce qui permet de ne pas avoir de "valeurs magiques" et d'augmenter la lisibilité du code.</p>
<p>Au lancement du programme, s'affiche dans la console un petit résumé de quelques grandeurs utiles ainsi qu'un résumé des touches qui active (toggle) les mécanismes de débug:</p>
<div class="ui grid">
<div class="two column row">
<div class="column"><pre><code>Config info:
---------
Resolution 1920 x 1080
World width: 60.0 x 33.75
Gravity: (0.0, -9.8)
PPM: 32.0

Map info:
---------
A tile: 16.0 x 16.0
Tiles: 200 x 200
Map (pixel): 3200.0 x 3200.0
Map (meters): 100.0 x 100.0

Debug info:
---------
F1: toggle state notifications
F2: toggle inputs events
F4: toggle gui
F7: toggle health
F8: pathfinding strategy
F9: toggle pathfinding marks
F10: Cycle range
F11: toggle lights
F12: toggle physics debug


</code></pre></div>
<div class="column">
<br>
<img src="https://i.imgur.com/spHhglM.png" width="400">
<p style="text-align: center">Lights on</p>
<img src="https://i.imgur.com/zlLwOum.png" width="400">
<p style="text-align: center">Lights off</p>
</div>
</div>
</div><div style="page-break-before:always"></div><p>"toggle physics debug" affiche les zones de collision des différents entités ainsi que leu vecteur de déplacement de ces dernières:</p>
<img src="https://i.imgur.com/AgT63Py.png" width="750">
<p style="text-align: center">Physics off</p>
<br>
<br>
<img src="https://i.imgur.com/GC91ypy.png" width="750">
<p style="text-align: center">Physics on</p>
<div style="page-break-before:always"></div><p>"toggle pathfinding" permet d'afficher un visuel du trajet qu'emprunte une entité.</p>
<img src="https://i.imgur.com/66anYfg.png" width="800">
<p style="text-align: center">pathfinding marks</p>
<p>Les barres de vie ne s'affichent que si une entité n'est pas à 100% de sa vie. "toggle healthbar" permet d'activer ou de désactiver ces barres.</p>
<img src="https://i.imgur.com/sC2RpoY.png">
<p style="text-align: center">healthbar</p>
<p>D'autres affichages de debug plus spécifiques à l'un ou l'autre systèmes seront présentés dans les pages qui suivent.</p>
<div style="page-break-before:always"></div><h4>Champ de vue, portée et état</h4>
<p>Dans YARTS, les entités ont conscience du monde qui les entoure et réagissent à ce qu'elles voient. Chaque entité possède un champ de vue et une portée qu'il est possible de voir dans le jeu en pressant plusieurs fois sur <code>F10</code>:</p>
<img src="https://i.imgur.com/NCH3Zsm.png" width="800">
<br>
<p>Au centre de chaque cercle se trouve une entité. À gauche un Soldat et à droite un Mage. Le cercle extérieur représente le champ de vue de l'entié et le cercle intérieur est spécifique au type d'entité. Le Soldat est de type Cac (Corp à corp) et son petit cercle correspond à sa portée d'attaque. Le Mage est une entité de type Distance et sa portée d'attaque est équivalente à son champ de vue alors que le cercle intérieur représente la distance minimum à laquelle il peut attaquer.</p>
<p>Ces deux entitées n'appartiennent pas au même joueur, et sont donc automatiquement agressives l'une face à l'autre. Cela veut dire que si par exemple le Mage rentre dans la portée du Soldat, ce dernier va l'engager sans que le joueur n'ai quoi que ce soit à faire.</p>
<p>Pour le moment les deux entitées ne se voient pas et elle se trouve dans l'état <code>Passive</code>. En effet dans Yarts, le comportement des entités est régit par une machine d'état. Les changements d'états sont influancés par deux choses:</p>
<ol>
<li>Le monde qui entour l'entité</li>
<li>Les inputs de l'utilisateur</li>
</ol>
<p>Le diagramme 4  (page suivante) présente la première version de la machine d'état qui régit le comportement des entités. Dans la version actuelle du jeu, deux états supplémentaires complètent ce modèle (<code>Disengaging</code> et <code>Dead</code>).</p>
<div style="page-break-before:always"></div><img src="https://i.imgur.com/EJCXMYO.png" width="800">
<br>
<br>
<p>Si maintenant, le joueur selectionne le mage et le déplace sur le bord de la portée du Soldat, le mage passera à l'état "Moving" et ce changement sera log dans la console:</p>
<pre><code>[STATE] P1 WIZARD3 MOVING state towards (41.999996,19.799997)
</code></pre>
<p>Dés qu'il rentre dans le champ de vue du Soldat, ce dernier passe à l'état "Engaging" qui est l'état qui correspond au fait qu'il a vu un ennemi mais qu'il est trop loin pour l'attaquer. Le Soldat se met donc automatiquement à la poursuite du Mage et la console va log la ligne suivante:</p>
<pre><code>[STATE] P2 WARRIOR5 ENGAGING state Against WIZARD3
</code></pre>
<img src="https://i.imgur.com/4eO6XFv.png" width="600">
<br>Les cercles reflètent l'état de l'entité ("Engaging = jaune")
<div style="page-break-before:always"></div><p>Une fois que le mage finit son déplacement il passe revient à l'état "Passive" mais comme le Mage voit maintenant aussi le Soldat il change directement d'état et passe en "Engaged". En effet comme le mage est de type Distance, il n'a pas besoin de se déplacer pour attaquer le Soldat et passe directement à l'état "Engaged":</p>
<pre><code>[STATE] P1 WIZARD3 ~PASSIVE~ state 
[STATE] P1 WIZARD3 -ENGAGED- state Against WARRIOR5
</code></pre>
<p>Dans cet état, le mage attaque le Soldat avec des boules de feu dont la fréquence est gérée par une autre machine d'état (qui ne sera pas développée dans ce rapport). La capture suivante illustre cet instant: Le Soldat se déplace dans la direction du Mage ("Engaging") et le Mage lui attaque le Soldat ("Engaged"):</p>
<img src="https://i.imgur.com/vQdJZ12.png" width="500">
<br>Soldat: "Engaging" (jaune) &nbsp; Mage: "Engaged" (rouge)
<p>Le Mage ne peut pas se déplacer pendant qu'il incante une boule de feu, et fatalement le Soldat va finir par rentrer dans le petit cercle du Mage qui correspond à sa portée minimum. À cet instant, le Mage change son état en "Disengaging" ce qui correspond à un état de fuite. Il se déplace donc automatiqument dans la direction opposée de celle du Soldat:</p>
<pre><code>[STATE] P1 WIZARD3 DISENGAGE state Against WARRIOR5
</code></pre>
<img src="https://i.imgur.com/q4Koai4.png" width="500">
<br> Noter l'apparition de la barre de vie suite au dégats faits par la boule de feu
<div style="page-break-before:always"></div><p>Comme le mage se déplace légèrement plus vite que le Soldat (Il ne porte pas d'armure) au moment où la portée est à nouveau suffisante, il repassera à l'état "Passive" et l'instant d'après à l'état "Engaged" et lance une nouvelle boulle de feu sur le Soldat. Ainsi de suite jusqu'à ce que le Soldat le coince dans et coin et ne déverse toute sa rage sur lui.</p>
<pre><code>[STATE] P2 WARRIOR5 -ENGAGED- state Against WIZARD3
</code></pre>
<img src="https://i.imgur.com/CiG9Kh3.png" width="700">
<br>
<br>
<br>
<p>Et finalement après quelques baffes de plus:</p>
<pre><code>[STATE] P1 WIZARD3 DEAD state
</code></pre>
<p>Les mécanismes qui viennent d'être décrits forment l'IA des entités du jeu. Le fonctionnement de ces mécanismes fait intervenir de nombreux systèmes et leur conception est au coeur de la problématique décrite dans l'introduction du chapitre qui décrit l'architecture.</p>
<p>Le prochain point couvre l'échange de messages et les notifications entre les différents systèmes.</p>
<div style="page-break-before:always"></div><h4>Notifications</h4>
<p>Pour réduire le couplage au sein du framework il a rapidement été nécessaire de trouver un moyen efficace pour gérer la communication entre les différents systèmes. Le diagramme 5 présente une version simplifiée de ce mécanisme. Ce diagramme montre l'utilisation du pattern <em>observer</em> qui s'occupe de dispatcher les evenements générés d'un coté par LibGDX (inputs) et de l'autre par les systèmes.... aux systèmes.</p>
<img src="https://i.imgur.com/vKnN9OA.png" width="850">
<br>
<br>
<br>
<p>Affin de renforcer le principe de responsabilité unique, les évenements communique via des classes qui implémentent le pattern <em>commande</em> ce qui déplace le code lié à la communication des systèmes à une série de classes (qui pour plus de clarté ne sont pas visible sur le diagramme) qui portent le suffixe "Handler".</p>
<div style="page-break-before:always"></div><h4>Pathfinding</h4>
<p>L'Algorithme utlisé est A*, une extension de l’algorithme de Dijkstra. Il permet de calculer le chemin le plus court entre deux points.</p>
<p>En interne, le mécanisme de pathfinding se représente la map sous la forme d'un graph qui représente une grille de points. Il est possible le chemin généré par l'algorithme avec la touche <code>f9</code>.</p>
<img src="https://i.imgur.com/dtYIAPl.png" width="850">
Pathfinding dans une ancienne version du jeu, mais le principe est le même.
<br>
<br>
<br>
<p>L'implémentation de l'algorithme ayant des problèmes, son utilisation n'est pas complètement fiable. L'utilisation d'un pattern <em>strategy</em> permet de changer entre l'algorithme de déplacement de base et A* en pressant la touche <code>f7</code> en jeu.</p>
<div style="page-break-before:always"></div><h4>Brouillard de guerre</h4>
<p>Le brouillard de guerre permet de cacher une partie de la carte, il sert à dissimuler les actions d'un autre joueur ou de l'ordinateur.</p>
<img src="https://i.imgur.com/4XEdYSM.jpg">    
Illustre le brouillard de guerreCapture d'écran du jeu Dune 2 qui 
<br>
<br>
<p>La première tentative d'implémentation du brouillard de guerre utilisait les facteurs d'openGL pour faire du mélange de couleurs (blending) cette façon de faire fonctionnait très bien dans un environement isolé mais n'a pas pu être adaptée au framework. Le problème vient de la façon dont est géré la carte dans le framework.</p>
<p>Après plusieurs autres tentatives, le brouillard de guerre était presque utilisable. Par manque de temps, le choix a été fait de mettre cette fonctionnalité en attente.</p>
<img src="https://i.imgur.com/IsNX0fO.png" width="800">
Implémentation fonctionnelle dans le framework mais hautement instable
<div style="page-break-before:always"></div><h3>Design</h3>
<p>Le design permet d'informer les utilisateurs du champ d'application d'un logiciel. Par exemple, un programme de gestion est moins attrayant visuellement. Il doit proposer à l'utilisateur des fonctionnalités qui permettent de traiter les données rapidement. Grâce à la disposition de ses éléments, on peut savoir rapidement à quel catégorie appartient le logiciel et qu'elle est son champ d'application.</p>
<p>Un jeu vidéo doit être attrayant pour trouver son public. Il est nécessaire de captiver les joueurs dans le jeu. C'est pour cela que le logiciel doit avoir beaucoup d'animations et d'événements indépendants qui permettent aux utilisateurs d'être toujours actif.</p>
<p>Le design permet aussi de donner une personnalité au jeu. Le choix du thème abordé est importante pour avoir une certaine harmonie.</p>
<h4>Map</h4>
<p>La map représente la surface jouable et il existe différentes de la représenter. Une des premières idées pour pouvoir faire des profondeurs de champ est d'utiliser la 3D. La modélisation 3D est lourd en développement et demande une certaine technicité. La vue 2D isométrique se rapproche d'un simple plan vu de dessus mais avec une gestion d'image et de la grille différente de la 2D "classique". On appelle aussi ce type de vue 2.5D ou isométrique. Pour mieux visualiser la différence voici deux exemples :</p>
<img src="https://i.imgur.com/qyOoTGr.png">
<p>ref: https://gamedevelopment.tutsplus.com</p>
<p>Dans YARTS, Le choix s'est porté sur la 2D (2.5D) pour réduire la complexité générale. En effet, le changement de coordonnées de la vue isométrique ajoute une couche de complexité qui n'est pas nécessaire pour ce projet.</p>
<p>La carte de YARTS est une vue classique 2D (2.5D). L'utilisation d'une coordonnée de hauteur <em>z</em> sert de critère de tri des éléments pour gérer leur ordre d'affichage et permet de donner un effet de perspective qui est implémenté avec une astuce toute simple: L'inverse de la coordonnée <em>y</em> d'un objet sur la map 2D est équivalent à la coordonnée <em>z</em>.</p>
<div style="page-break-before:always"></div><p>Les images suivantes illustrent la gestion de la perspective dans le jeu. Si un personnage est plus haut sur l'axe des ordonnées, il se trouve derrière un objet situé plus bas sur l'axe.</p>
<img src="https://i.imgur.com/RPvugjQ.png" height="350">
<img src="https://i.imgur.com/XjWdk3s.png" height="350" style="margin-left: 30px">
<p style="margin-left: 100px">Gestion de la perspective</p>
<br>
<p>Pour la création de la map, <a href="https://www.mapeditor.org/">Tiled</a> est utilisé. C'est un logiciel qui permet de générer des fichiers utilisable directement dans le framework. Tiled permet de définir des emplacements référencés par une string qu'il est possible de les récupérer dans le framework pour y instancier des objets particuliers:</p>
<div class="ui grid">
<div class="two column row">
<div class="column">
<img src="https://i.imgur.com/0NSwkjS.jpg" height="350">
<p style="text-align: center">Dans l'éditeur</p>
</div>
<div class="column">
<img src="https://i.imgur.com/TIhCtyL.jpg" height="350">
<p style="text-align: center">Rendu dans le jeu</p>
</div>
</div>
</div><div style="page-break-before:always"></div><h4>Sprites</h4>
<p>Un sprite est une image d'une taille standard en pixel (32x32, 64x64,...). Une collection de sprites se nomme "tileset" dans le cas de sprites qui contiennent des éléments de décore. YARTS utilise un tileset de offert par <a href="https://www.kenney.nl/">kenney.nl</a>:</p>
<img src="https://i.imgur.com/werMmFF.png" width="500">
<br><p style="margin-left: 100px">Kenney Rogue-like tileset</p>
<h4>Animations</h4>
<img src="https://i.imgur.com/lR2e9rG.png" style="float: right; padding-left: 15px" width="300">
<p>Pour les sprites d'animations on parle de spritesheet, chaque image (frame) d'une animation est une région (une "case") de cette spritesheet. L'image sur la droite est la spritesheet utilisée pour l'entité Archer.</p>
<p>L'animation des personnages se fait grâce aux différents systèmes de gestion des textures. <code>OrientationSystem</code> permet de déterminer quel direction doit utiliser <code>AnimationSystem</code> pour que le personnage s'affiche dans la bonne orientation au moment d'un déplacement. <code>AnimationSystem</code> détermine ensuite quel image set dans le component <code>TextureComponent</code>. <code>RenderingSystem</code> lui ne se charge que de dessiner l'image qu'il trouve dans <code>TextureComponent</code>.</p>
<p>Pour le projet, la création des personnages s'est fait grâce à un générateur de spritesheet <a href="http://gaurav.munjal.us/Universal-LPC-Spritesheet-Character-Generator/">Universal LPC Generator</a>. Les images sont ensuite traité sur <a href="https://www.gimp.org/fr/">Gimp</a></p>
<div style="page-break-before:always"></div><h4>Gestion des ressources</h4>
<p>L'instanciation d'image peut rapidement devenir lourd en mémoire.
La classe <code>TexturesManager</code> implémente <em>flyweight</em> et <em>singleton</em>. Elle permet de n'avoir qu'une unique instance de chaque image ou tileset.</p>
<h4>Interface utilisateur</h4>
<p>L'interface utilisateur créée pour le projet doit pouvoir être dynamique et se mettre à jour régulièrement par rapport aux événements du jeu. Il permet d'avoir une vue d'ensemble de la partie et de donner des actions possibles à l'utilisateur.</p>
<img src="https://i.imgur.com/KbPE8Ea.jpg" width="820">
<ol>
<li>Information sur la partie : image par seconde, temps de jeu, ressources, nombre d'unité disponible</li>
<li>Mini-map</li>
<li>unité principale sélectionnée, boutons d'action</li>
<li>liste d'unités sélectionnées</li>
</ol>
<div style="page-break-before:always"></div><h5>Mini-map</h5>
<img src="https://i.imgur.com/AmPOZwg.jpg" width="200x" style="float:left; padding-right:25px">
<p>Une mini-map permet d'avoir une vision réduite de la map avec uniquement les informations cruciales.</p>
<p>Les points rouges montrent où sont situés les unités sur la map. Le rectangle turquois simule la vision de l'utilisateur qu'il a sur la map.</p>
<p>Pour pouvoir mettre la position des unités sur la mini-map, il la faut appliquer des transformations pour les mettre à l'échelle. En plus de cette modification, un certain nombre d'autres transformations doivent être faites (alignement à la taille de la mini-map, la résolution de l'écran, changement de l'origine,...). C'est la classe <code>MiniMap</code> qui traite la gestion et la mise à l'échelle des coordonnées des objets à afficher.</p>
<h5>Panel actions et sélections</h5>
<p>La gestion des panels d'actions et de sélections se fait dans des systèmes. le système <code>ButtonTableSystem</code> et <code>SelectionTableSystem</code> utilisent une classe <code>Vignette</code> qui permet de créer des boutons qui sont liées à une entités et/ou à une action. A chaque fois qu'une nouvelle entité est sélectionnée, ses actions possibles sont mises à jour par le système <code>ButtonTableSystem</code>.</p>
<p><code>SelectionTableSystem</code> récupère toute les entités sélectionnées et affiche les vignettes correspondantes.</p>
<p>L'image suivante illustre le panel d'actions. A gauche, l'unité sélectionnée et à droite, les différentes actions possibles avec cette entité (construction d'une base et d'une caserne). Diverses informations peuvent également y figurer comme dans le cas présent, les points de vie.</p>
<img src="https://i.imgur.com/nK9Zxy0.jpg" height="150x">
<br><p style="margin-left: 140px">Pannel d'actions</p>
<div style="page-break-before:always"></div><h2>Récapitulatif</h2>
<p>La dernière itération du framework comporte un total de 122 classes dont 59 appartiennent au package ECS (34 components, 22 systèmes et 3 utilitaires). Yarts contient 11 classes supplémentaires.</p>
<p>Les 8 patternes suivates ont été utilisées:</p>
<ul>
<li><strong>Flyweight</strong>: <code>TexturesManager</code></li>
<li><strong>Singleton</strong>: Classes suffixées de <code>Manager</code></li>
<li><strong>Facade</strong>: classes suffixées de <code>Base</code> ainsi que <code>Map</code>, <code>EcsHelpers</code> et <code>Mapper</code></li>
<li><strong>Adapter</strong>: classes internes chargées de la conversion d'unités</li>
<li><strong>Factory</strong>: classes suffixées de "factory" dans le package "yarts"</li>
<li><strong>Abstract factory</strong>: classes suffixées de "factory" dans le package "framework"</li>
<li><strong>Observer</strong>: classes suffixées de "listener"</li>
<li><strong>Command</strong>: classes suffixées de "event"</li>
</ul>
<p>Un nombre totalement incalculable d'heures a été passé a réfléchir, discuter, chercher, lire, relire, et coder.</p>
<div style="page-break-before:always"></div><h3>Objectifs</h3>
<p>L'objectif principal était de pouvoir mettre en place les fondations d'un jeu de stratégie en temps réel avec ses méchaniques de base. Les objectifs suivants sont atteints:</p>
<ul>
<li>Afficher une air de jeu</li>
<li>Sélectionner des unités</li>
<li>Déplacement des unités</li>
<li>Avoir un système de combat</li>
<li>Créer de nouvelles unités</li>
<li>Créer de nouveaux bâtiments</li>
<li>Système économique basé sur des ressources à collecter</li>
<li>Interface utilisateur:
<ul>
<li>Affichage d'une mini carte</li>
<li>Affichage des ressources</li>
<li>Affichage de la population</li>
<li>Panel d'actions spéciales des unités</li>
<li>Curseur intelligent (mais pas esthétique pour le moment)</li>
</ul>
</li>
</ul>
<br>
<p>Les objectifs principaux suivant n'ont pas été atteints:</p>
<ul>
<li>Menu principale</li>
<li>Déplacement amélioré (Pathfinding)</li>
</ul>
<p>En revanche les objectifs secondaires suivants ont été atteints:</p>
<ul>
<li>Traiter l'aspect esthétique du jeu</li>
<li>Contexte de jeu</li>
</ul>
<br>
<p>La gestion de déplacement des unités n'a pas eu un bon résultat avec l'utilisation actuel d'algorithme de pathfinding. Il n'est pas toujours très précis et ne couvre pas toutes les possiblités du terrain. Toutefois, les entités ont un algorithme "fallback" pour se déplacer et ne resteront jamais figées.</p>
<p>L'affichage du brouillard de guerre ne fonctionne pas. Il y a actuellement un début de développement mais il ne permet pas d'être afficher correctement avec le reste du jeu.</p>
<p>le menu principal n'a pas pu être mise en place. Le manque de temps et le développement d'autres fonctionnalités plus a empeché sa création.</p>
<p>La création de musique et bruitage est un plus non négligable dans un jeu. Nous avons les outils et la connaissance nécessaire pour les créer et les implémenter mais malheureusement pas suffisament de temps.</p>
<div style="page-break-before:always"></div><h3>Bugs</h3>
<p>La liste est longue et n'est pas particulièrement documentée. La nature changeante et instable de l'architecture ne favorise pas la rédaction d'issues.</p>
<p>Les mécanismes les moins stables sont désactivés dans la version présentée et cette dernière jouit donc d'une certaine stabilité. Cette version est celle sur laquelle a été faite la vidéo de présentation fournie avec le présent document.</p>
<div style="page-break-before:always"></div><h3>Améliorations</h3>
<p>Le framework ainsi que le jeu sont au début de leur développement. Beaucoup d'améliorations sont possibles dont voici une liste non-exhaustive:</p>
<ul>
<li>Brouillard de guerre</li>
<li>Pathfinding</li>
<li>Ajout des conditions de victoire / défaite</li>
<li>Menu principal</li>
<li>Ajout d'options (résolutions, son, qualité des graphismes,...)</li>
<li>Ajout d'un mode multijoueur (en ligne)</li>
<li>Ajout de raccourcis clavier</li>
<li>Ajout d'un adversaire IA</li>
<li>Création de scénario (campagne)</li>
<li>Nouvelles unités/bâtiments</li>
<li>Équilibrage du jeu</li>
</ul>
<div style="page-break-before:always"></div><h2>Conclusion</h2>
<p>Faire un jeu vidéo est une activité passionante. C'est un sport complet qui couvre de nombreux domaines de la formation d'un ingénieur en développement logiciel. Les erreurs furent nombreuses et les leçons légion.</p>
<p>Il est difficile d'être satisfait du résultat. Oui, c'est beau et ça à l'air bien mais en tant qu'auteurs du programme il est bien difficile d'ignorer tout ce qui pourrait encore être fait.</p>
<p>Pour nous, les objectifs sont atteints et même si certaines features ne sont pas fonctionnelles, il est important de noter que la partie Yarts du projet a été réalisée en un temps très court. Le gros du développement s'est passé sur le framework. Une fois celui-ci dans un certain état d'avancement il a été remarquablement facile d'implémenter de nombreuses fonctionnalités. Par exemple, le système de construction de bâtiments ainsi que la production d'unités tout entiers furent implémentés dans les heures qui ont précédé la présentation du projet le 3 juin.</p>
<p>Relativement tôt dans le développement du framework cette "caractéristique" fut pressentie. La capacité qu'il aurait, une fois au point, de rapidement permettre de développer un jeu.</p>
<p>On ne devrait pas parler de pressentir des choses dans notre domaine d'industrie, les choses devraient être robustes et planifiées et non laissées au hasard des intuitions. Disons qu'on a eu de la chance, et acceptons que "expérience" est le nom que l'on donne à ce genre d'écarts de la voie toute tracée et que leur somme fera de nous des développeurs plus aptes à mieux plannifier.</p>
<div style="page-break-before:always"></div><h2>Ressources</h2>
<h3>papier</h3>
<ul>
<li>Lee Stemkoski - Beginning Java Game Development with LibGDX</li>
<li>Patrick Hoey - Mastering LibGDX Game Development</li>
</ul>
<h3>internet</h3>
<h5>LibGDX</h5>
<ul>
<li>Centralisation de tutos et articles <a href="https://github.com/libgdx/libgdx/wiki/External-tutorials">https://github.com</a></li>
<li>Game from scratch <a href="https://www.gamefromscratch.com/page/LibGDX-Tutorial-series.aspx">https://www.gamefromscratch.com</a></li>
</ul>
<h5>Développement de jeux en général</h5>
<ul>
<li>Game programming patterns : <a href="http://www.gameprogrammingpatterns.com/">http://www.gameprogrammingpatterns.com/</a></li>
<li>Erreurs classiques (fr) : <a href="http://conquerirlemonde.com/blog/index-des-articles/">http://conquerirlemonde.com/blog/index-des-articles/</a></li>
<li>Gamasutra : <a href="https://www.gamasutra.com/">https://www.gamasutra.com/</a></li>
<li>Redblobgames (algorithmes en détail) : <a href="https://www.redblobgames.com/">https://www.redblobgames.com/</a></li>
</ul>
<h5>Etat de l'art</h5>
<ul>
<li><a href="http://www.gamasutra.com/view/feature/132562/the_design_of_starcraft_ii.php">The Design of StarCraft II</a></li>
<li><a href="http://www.gamasutra.com/view/feature/134199/starcraft_ii_building_on_the_beta.php">StarCraft II: Building On The Beta</a></li>
<li><a href="http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php">1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond</a></li>
<li><a href="http://www.gamasutra.com/view/feature/134311/successful_playtesting_in_swords__.php">Successful Playtesting In Swords &amp; Soldiers</a></li>
<li><a href="http://www.gamasutra.com/view/feature/132618/postmortem_ronimo_games_swords__.php">Postmortem: Ronimo Games' Swords &amp; Soldiers</a></li>
<li><a href="http://www.gamasutra.com/view/feature/132691/the_end_of_rts_a_command__.php">The End of RTS? A Command &amp; Conquer 4 Interview</a></li>
</ul>
<h5>ECS</h5>
<ul>
<li>Introductif: <a href="www.gamedev.net/articles/programming/general-and-gameplay-programming">https://www.gamedev.net/</a></li>
<li>Overwatch gameplay architecture and ECS : <a href="https://www.youtube.com/watch?v=W3aieHjyNvw">https://www.youtube.com</a></li>
<li>ECS in C++ : <a href="https://www.gamasutra.com/blogs/TobiasStein/20171122/310172/The_EntityComponentSystem__An_awesome_gamedesign_pattern_in_C_Part_1.php">https://www.gamasutra.com/</a></li>
<li>ECS by Mark Jordan : <a href="https://medium.com/ingeniouslysimple/entities-components-and-systems-89c31464240d">https://medium.com</a></li>
<li>LibGDX and Ashley : <a href="https://www.gamedevelopment.blog/ashley-and-box2d-tutorial/">https://www.gamedevelopment.blog</a></li>
</ul>
<h5>Steering behaviors</h5>
<ul>
<li>Introductif : <a href="http://www.simoncoenen.com/downloads/ai_paper.pdf">http://www.simoncoenen.com</a></li>
<li>Introductif : <a href="https://gamedevelopment.tutsplus.com/series/understanding-steering-behaviors--gamedev-12732">https://gamedevelopment.tutsplus.com</a></li>
<li>Collision avoidance : <a href="https://gamedevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-collision-avoidance--gamedev-7777">https://gamedevelopment.tutsplus.com</a></li>
<li>Autonomous movement : <a href="http://fightingkitten.webcindario.com/?p=846">http://fightingkitten.webcindario.com</a></li>
</ul>
<h5>Pathfinding</h5>
<ul>
<li>Introductif : <a href="https://happycoding.io/tutorials/libgdx/pathfinding">https://happycoding.io/tutorials/libgdx</a></li>
<li>Heuristic : <a href="https://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html">https://theory.stanford.edu</a></li>
</ul>
<h5>Brouillard de guèrre</h5>
<ul>
<li>Introductif : <a href="https://www.programcreek.com">https://www.programcreek.com</a></li>
</ul>
<h5>Level Design</h5>
<ul>
<li>Simplex Noise : <a href="https://www.gamedevelopment.blog/generating-random-terrain-using-simplex-noise/">gamedevelopment.blog</a></li>
<li>Noise génération : <a href="https://www.redblobgames.com/articles/noise/introduction.html">redblobgames.com</a></li>
<li>Perlin noise : <a href="https://stackoverflow.com/questions/17440865/using-perlin-noise-to-generate-a-2d-tile-map">stackoverflow.com</a></li>
<li>Random noise : <a href="https://lodev.org/cgtutor/randomnoise.html">lodev.org</a></li>
<li>Map from noise: <a href="https://www.redblobgames.com/maps/terrain-from-noise/">redblobgames.com</a></li>
<li>Random map generation: <a href="https://www.gamedevelopment.blog/full-libgdx-game-tutorial-infinite-level-generation-with-simplex-noise/">gamedevelopment.blog</a></li>
<li>Map generator : <a href="https://github.com/gpertzov/auto-tile-gdx">github.com</a></li>
<li>More on Map generator : <a href="https://gpdev.net/autotile.html">gpdev.net</a></li>
</ul>
<h5>Ui Design</h5>
<ul>
<li>Basic : <a href="https://www.gamedevelopment.blog/full-libgdx-game-tutorial-menu-control/">gamedevelopment.blog</a></li>
<li>Scene2D : <a href="https://www.gamedevelopment.blog/full-libgdx-game-tutorial-scene2d/">gamedevelopment.blog</a></li>
<li>Vis-ui : <a href="https://github.com/kotcrab/vis-ui">github.com</a></li>
<li>Ui-skins : <a href="https://github.com/czyzby/gdx-skins">github.com</a></li>
</ul>
<h5>Repo des mini projets faits pour se familiariser avec LibGDX</h5>
<ul>
<li>Starfish-Collector : <a href="https://github.com/RoscaS/libGDX_Starfish-Collector">https://github.com/RoscaS/libGDX_Starfish-Collector</a></li>
<li>Adventure-Game : <a href="https://github.com/RoscaS/libGDX_Adventure-Game">https://github.com/RoscaS/libGDX_Adventure-Game</a></li>
<li>Space-Rocks : <a href="https://github.com/RoscaS/libGDX_Space-Rocks">https://github.com/RoscaS/libGDX_Space-Rocks</a></li>
<li>MarioBros : <a href="https://github.com/RoscaS/libGDX_MarioBros">https://github.com/RoscaS/libGDX_MarioBros</a></li>
<li>Jigsaw-Puzzle : <a href="https://github.com/RoscaS/libGDX_Jigsaw-Puzzle">https://github.com/RoscaS/libGDX_Jigsaw-Puzzle</a></li>
<li>Jumping-Jack : <a href="https://github.com/RoscaS/libGDX_Jumping-Jack">https://github.com/RoscaS/libGDX_Jumping-Jack</a></li>
<li>Ashley : <a href="https://github.com/RoscaS/libGDX_Ashley">https://github.com/RoscaS/libGDX_Ashley</a></li>
</ul>
<h2>Annexes</h2>
<ol>
<li>Presentation-YARTS.mp4</li>
<li>yarts.jar</li>
</ol>
<template id="page-footer"><style type="text/css">.pdfFooter {
    font-size: 10px;
    opacity: .7;
    font-family: Helvetica;
    font-weight: bold;
    width: 1000px;
    border-top: 1px solid #aaa;
    margin-left: 10%;
    margin-right: 10%;
    padding-top: 1mm;
    margin-bottom: -1mm;
    text-align: center;
}
</style><div class="pdfFooter">Page <span class="pageNumber"></span> / <span class="totalPages"></span></div></template><style>@charset "UTF-8";
@import "https://fonts.googleapis.com/css?family=Open+Sans";
@import "https://fonts.googleapis.com/css?family=Montserrat";
@import "https://fonts.googleapis.com/css?family=Ubuntu+Mono&display=swap";
@import "https://fonts.googleapis.com/css?family=Nova+Mono&display=swap";
@import "https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.0/semantic.min.css";
@import "https://afeld.github.io/emoji-css/emoji.css";
/*background color*/
@import "https://fonts.googleapis.com/css?family=Special+Elite";
.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #1d1f21;
  border-radius: 5px; }

/*selection color*/
.hljs::selection,
.hljs span::selection {
  background: #373b41; }

.hljs::-moz-selection,
.hljs span::-moz-selection {
  background: #373b41; }

/*foreground color*/
.hljs {
  color: #c5c8c6; }

/*color: fg_yellow*/
.hljs-title,
.hljs-name {
  color: #f0c674; }

/*color: fg_comment*/
.hljs-comment,
.hljs-meta,
.hljs-meta .hljs-keyword {
  color: #707880; }

/*color: fg_red*/
.hljs-number,
.hljs-symbol,
.hljs-literal,
.hljs-deletion,
.hljs-link {
  color: #cc6666; }

/*color: fg_green*/
.hljs-string,
.hljs-doctag,
.hljs-addition,
.hljs-regexp,
.hljs-selector-attr,
.hljs-selector-pseudo {
  color: #b5bd68; }

/*color: fg_purple*/
.hljs-attribute,
.hljs-code,
.hljs-selector-id {
  color: #b294bb; }

/*color: fg_blue*/
.hljs-keyword,
.hljs-selector-tag,
.hljs-bullet,
.hljs-tag {
  color: #81a2be; }

/*color: fg_aqua*/
.hljs-subst,
.hljs-variable,
.hljs-template-tag,
.hljs-template-variable {
  color: #8abeb7; }

/*color: fg_orange*/
.hljs-type,
.hljs-built_in,
.hljs-builtin-name,
.hljs-quote,
.hljs-section,
.hljs-selector-class {
  color: #de935f; }

.hljs-emphasis {
  font-style: italic; }

.hljs-strong {
  font-weight: bold; }

@page {
  margin: 2cm 1cm 2cm 0cm; }

html {
  padding: 0 4cm 0cm 4cm;
  font-family: "Lato";
  font-size: 18px; }

body {
  margin-left: 1cm;
  counter-reset: h2;
  font-size: 18px; }

#title {
  font-weight: bold;
  font-size: 2.5em; }

img {
  border-radius: 10px; }

pre code {
  font-family: "Nova Mono", monospace; }

.summary {
  background-color: #e5e9f3; }

.ver-img {
  width: 700px; }

.diag-caption {
  border: 1px solid #ccc !important;
  margin-left: 8.75cm;
  padding: 5px; }

blockquote {
  font-family: 'Special Elite', cursive;
  z-index: -1;
  position: relative;
  margin: 0;
  padding: .5rem; }

blockquote:before,
blockquote:after {
  position: absolute;
  color: #f1efe6;
  font-size: 8rem;
  width: 4rem;
  height: 4rem; }

blockquote:before {
  content: '“';
  left: -4rem;
  top: 2rem; }

blockquote:after {
  content: '”';
  right: -4rem;
  bottom: -6rem; }

h2, h3, h4, h5, h6 {
  color: #874250;
  z-index: 1; }

h4 {
  font-size: 20px; }

h3 {
  counter-reset: h4; }

h2 {
  font-size: 1.8em;
  counter-reset: h3; }

h2:before {
  counter-increment: h2;
  content: counter(h2) ". "; }

h3:before {
  counter-increment: h3;
  content: counter(h2) "." counter(h3) ". "; }

h4:before {
  counter-increment: h4;
  content: counter(h2) "." counter(h3) "." counter(h4) ". "; }

h2.no-count:before,
h3.no-count:before,
h4.no-count:before {
  content: "";
  counter-increment: none; }

p {
  line-height: 1.5em;
  font-size: 1.1em !important;
  text-align: justify;
  z-index: 1; }

a {
  text-decoration: underline;
  color: inherit; }

.report-sidebar {
  position: fixed;
  left: -0.3in;
  top: 0;
  width: 0.3in;
  height: 943px;
  writing-mode: vertical-rl;
  border-top: 0.3in solid transparent;
  border-left: 0.3in solid #7189bf;
  border-bottom: 0.3in solid transparent; }
  .report-sidebar p {
    text-align: center;
    color: #dae1ef;
    margin-top: -1.55em;
    word-spacing: 10px; }

ul li {
  font-size: 1.1em; }

table {
  margin: auto;
  border-collapse: collapse;
  border-spacing: 0; }

table th {
  font-weight: bold; }

table th,
table td {
  text-align: left;
  padding: 0.2em 0.5em 0.2em 0.5em;
  border-bottom: 1px solid; }

table th[align="center"],
table td[align="center"] {
  text-align: center; }

table th[align="right"],
table td[align="right"] {
  text-align: right; }

table tbody tr:last-child th,
table tbody tr:last-child td {
  border-bottom: none; }

.block-center {
  display: block;
  margin: 0 auto; }

.mermaid-svg {
  max-width: 100%;
  height: auto;
  display: block; }
  .mermaid-svg .node rect {
    fill: none;
    rx: 5px;
    ry: 5px;
    stroke: black; }
  .mermaid-svg .edgelabel {
    background: white;
    color: #444; }

.message,
figure {
  page-break-inside: avoid; }

.message {
  margin-bottom: 1em !important; }

figure {
  margin-top: 0.5em;
  margin-bottom: 1em;
  padding: 0.5em; }
  figure > .panel {
    position: relative;
    display: inline-block;
    vertical-align: top;
    width: 100%; }
    figure > .panel > .label {
      font-weight: bold;
      position: absolute;
      top: 0;
      left: 0; }
  figure.float-left {
    margin-left: -1em !important;
    margin-right: 2em !important;
    margin-top: 1em;
    margin-bottom: 1em;
    float: left; }
  figure figcaption {
    font-size: 0.75em;
    text-align: justify;
    width: 100%;
    margin-top: 1em; }
    figure figcaption > .reference,
    figure figcaption .title {
      font-weight: bold;
      display: inline;
      margin-right: 0.5em; }
    figure figcaption > .reference {
      color: #0f1522; }
      figure figcaption > .reference::after {
        content: ": "; }
    figure figcaption > .title {
      color: #1f2b45; }
    figure figcaption > .caption {
      display: inline; }

.width-1cm {
  width: 10mm !important; }

.width-2cm {
  width: 20mm !important; }

.width-3cm {
  width: 30mm !important; }

.width-4cm {
  width: 40mm !important; }

.width-5cm {
  width: 50mm !important; }

.width-6cm {
  width: 60mm !important; }

.width-7cm {
  width: 70mm !important; }

.width-8cm {
  width: 80mm !important; }

.width-9cm {
  width: 90mm !important; }

.width-10cm {
  width: 100mm !important; }

.width-11cm {
  width: 110mm !important; }

.width-12cm {
  width: 120mm !important; }

.width-13cm {
  width: 130mm !important; }

.width-14cm {
  width: 140mm !important; }

.width-15cm {
  width: 150mm !important; }

.width-16cm {
  width: 160mm !important; }

.width-17cm {
  width: 170mm !important; }

.width-18cm {
  width: 180mm !important; }

.width-19cm {
  width: 190mm !important; }

.top-1mm {
  margin-top: 1mm; }

.top-2mm {
  margin-top: 2mm; }

.top-3mm {
  margin-top: 3mm; }

.top-4mm {
  margin-top: 4mm; }

.top-5mm {
  margin-top: 5mm; }

.top-6mm {
  margin-top: 6mm; }

.top-7mm {
  margin-top: 7mm; }

.top-8mm {
  margin-top: 8mm; }

.top-9mm {
  margin-top: 9mm; }

.top-10mm {
  margin-top: 10mm; }

.top-11mm {
  margin-top: 11mm; }

.top-12mm {
  margin-top: 12mm; }

.top-13mm {
  margin-top: 13mm; }

.top-14mm {
  margin-top: 14mm; }

.top-15mm {
  margin-top: 15mm; }

.top-16mm {
  margin-top: 16mm; }

.top-17mm {
  margin-top: 17mm; }

.top-18mm {
  margin-top: 18mm; }

.top-19mm {
  margin-top: 19mm; }
</style> 
    </div></body></html>